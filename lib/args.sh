#!/bin/bash

# shellcheck disable=SC2034

_command1_help() {
  cat << EOF
Top-level command. Must be one of:
            - internal
            - terraform
            - buildkite
            - shell
            - snyk
EOF
}

_command2_help() {
  cat << EOF
Second-level command.
          The 'internal' command accepts the following:
            - version
          The 'terraform' command accepts the following:
            - init
            - workspace
            - validate
            - output
            - output-json
            - plan
            - plan-destroy-local
            - plan-local
            - apply
            - refresh
            - destroy
            - console
            - lint
          The 'buildkite' command accepts the following:
            - pipeline
          The 'shell' command accepts the following:
            - shfmt
            - shellcheck
            - lint
          The 'snyk' command accepts the following:
            - project
            - test-app
            - test-iac
EOF
}

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_SINGLE([config],[c],[Config file for toolbox])
# ARG_OPTIONAL_SINGLE([workspace],[w],[Terraform workspace name])
# ARG_OPTIONAL_SINGLE([skip-init],[s],[Whether to skip Terraform initialisation],[false])
# ARG_POSITIONAL_SINGLE([command1],[$(_command1_help)])
# ARG_POSITIONAL_SINGLE([command2],[$(_command2_help)])
# ARG_DEFAULTS_POS()
# ARG_HELP([The toolbox provides common infrastructure functionality])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='cwsh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_command1=
_arg_command2=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_config=
_arg_workspace=
_arg_skip_init="false"


print_help()
{
	printf '%s\n' "The toolbox provides common infrastructure functionality"
	printf 'Usage: %s [-c|--config <arg>] [-w|--workspace <arg>] [-s|--skip-init <arg>] [-h|--help] <command1> <command2>\n' "$0"
	printf '\t%s\n' "<command1>: $(_command1_help)"
	printf '\t%s\n' "<command2>: $(_command2_help)"
	printf '\t%s\n' "-c, --config: Config file for toolbox (no default)"
	printf '\t%s\n' "-w, --workspace: Terraform workspace name (no default)"
	printf '\t%s\n' "-s, --skip-init: Whether to skip Terraform initialisation (default: 'false')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-c|--config)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_config="$2"
				shift
				;;
			--config=*)
				_arg_config="${_key##--config=}"
				;;
			-c*)
				_arg_config="${_key##-c}"
				;;
			-w|--workspace)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_workspace="$2"
				shift
				;;
			--workspace=*)
				_arg_workspace="${_key##--workspace=}"
				;;
			-w*)
				_arg_workspace="${_key##-w}"
				;;
			-s|--skip-init)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_skip_init="$2"
				shift
				;;
			--skip-init=*)
				_arg_skip_init="${_key##--skip-init=}"
				;;
			-s*)
				_arg_skip_init="${_key##-s}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'command1' and 'command2'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_command1 _arg_command2 "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
